#lang racket
(define (igual? l L)
  (if (nand (null? l) (null? L))
      (if (equal? (car l) (car L))
          (igual? (cdr l) (cdr L))
          (display "Las listas no son iguales.")
          )
      (display "las listas son iguales.")
      )
  )
(define (crear-lista)
  (display "ingrse que tan grande serÃ¡n sus dos lista: ")
  (define lista (build-list (read) values))
  lista
  )
(define (llenar-lista l x n L p)
  (if (not (null? l))
      (begin
        (printf "ingrese a la lista ~a el dato numero ~a: " p (+ x 1))
        (set! n (read))
        (set! L (list-set L x n))
        (llenar-lista (cdr l) (+ x 1) 0 L p)
        )
      L
      )
  )
(define (punto4)
  (define lista (crear-lista))
  (define list (llenar-lista lista 0 0 lista 1))
  (define list2 (llenar-lista lista 0 0 lista 2))

  (igual? list list2)
  (newline)
  (display list)
  (newline)
  (display list2)
  )
(punto4)