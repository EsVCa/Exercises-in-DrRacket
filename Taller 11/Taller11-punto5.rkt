#lang racket
(define (est-str? n l C)
  (if (not (null? l))
      (if (equal? n (car l))
          (est-str? n (cdr l) (+ C 1))
          (est-str? n (cdr l) C)
          )
      (printf "la cadena ~a se repite ~a veces" n C)
      )
  )
(define (crear-lista)
  (display "ingrse que tan grande serÃ¡ su lista: ")
  (define lista (build-list (read) values))
  lista
  )
(define (ingresa L x)
  (define n (read-line))
  (set! L (list-set L x n))
  L
)
  
(define (llenar-lista l x n L p)
  (if (not (null? l))
      (begin
        (printf "ingrese el dato numero ~a: " (+ x 1))
        (set! L (ingresa L x))
        (llenar-lista (cdr l) (+ x 1) 0 L p)
        )
      L
      )
  )
(define (punto4)
  (define n (string))
  (define lista (crear-lista))
  (define list (llenar-lista lista 0 0 lista 1))

  (display "ingrese un numero para saber si se repite o no en su lista y cuantas veces se repite: ")
  (set! n (read-line))
  (est-str? n list 0)
  (newline)
  (display list)
  (newline)
  )
(punto4)