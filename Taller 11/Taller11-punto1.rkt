#lang racket
(define (est? n l C)
  (if (not (null? l))
      (if (= n (car l))
          (est? n (cdr l) (+ C 1))
          (est? n (cdr l) C)
          )
      (printf "el numero ~a se repite ~a veces" n C)
      )
  )
(define (crear-lista)
  (display "ingrse que tan grande serÃ¡ tu lista: ")
  (define lista (build-list (read) values))
  lista
  )
(define (llenar-lista l x n L)
  (if (not (null? l))
      (begin
        (printf "ingrese el dato numero ~a: " (+ x 1))
        (set! n (read))
        (set! L (list-set L x n))
        (llenar-lista (cdr l) (+ x 1) 0 L)
        )
      L
      )
  )
(define (punto1) 
  (define n 0)
  (define lista (crear-lista))
  (define list (llenar-lista lista 0 0 lista))
  (display "ingrese un numero para saber si se repite o no en su lista y cuantas veces se repite: ")
  (set! n (read))
  (est? n list 0)
  )
(punto1)
  